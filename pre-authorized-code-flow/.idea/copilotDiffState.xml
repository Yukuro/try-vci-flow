<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/server.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server.js" />
              <option name="originalContent" value="const express = require('express');&#10;const crypto = require('crypto');&#10;const QRCode = require('qrcode');&#10;const { SignJWT, generateKeyPair, importJWK, exportJWK } = require('jose');&#10;const { v4: uuidv4 } = require('uuid');&#10;const cors = require('cors');&#10;const path = require('path');&#10;&#10;const app = express();&#10;const PORT = process.env.PORT || 8888;&#10;&#10;// ドメイン名をコマンドライン引数から取得&#10;const domain = process.argv[2] || 'localhost:8888';&#10;const baseUrl = domain.includes('localhost') ? `http://${domain}` : `https://${domain}`;&#10;&#10;// ミドルウェア&#10;app.use(express.json());&#10;app.use(express.urlencoded({ extended: true })); // application/x-www-form-urlencoded対応&#10;app.use(cors());&#10;app.use(express.static('views'));&#10;&#10;// メモリストレージ（本番環境では永続化ストレージを使用）&#10;const preAuthorizedCodes = new Map();&#10;const accessTokens = new Map();&#10;const userCredentials = new Map();&#10;&#10;// 暗号化キーペアの生成&#10;let keyPair;&#10;let publicKeyJWK;&#10;let privateKeyJWK;&#10;let didJwk;&#10;&#10;async function initializeKeys() {&#10;    // ES256K キーペアを生成&#10;    keyPair = await generateKeyPair('ES256K');&#10;    publicKeyJWK = await exportJWK(keyPair.publicKey);&#10;    privateKeyJWK = await exportJWK(keyPair.privateKey);&#10;&#10;    // DID:JWKの生成&#10;    const publicKeyJwkString = JSON.stringify(publicKeyJWK);&#10;    const encodedJwk = Buffer.from(publicKeyJwkString).toString('base64url');&#10;    didJwk = `did:jwk:${encodedJwk}`;&#10;&#10;    console.log(`\n キーペア生成完了`);&#10;    console.log(` DID:JWK: ${didJwk}`);&#10;    console.log(` ベースURL: ${baseUrl}`);&#10;}&#10;&#10;// ルートページ&#10;app.get('/', (req, res) =&gt; {&#10;    res.sendFile(path.join(__dirname, 'views', 'index.html'));&#10;});&#10;&#10;// OpenID Credential Issuer Metadata&#10;app.get('/.well-known/openid-credential-issuer', (req, res) =&gt; {&#10;    const metadata = {&#10;        credential_issuer: baseUrl,&#10;        credential_endpoint: `${baseUrl}/credentials`,&#10;        token_endpoint: `${baseUrl}/token`,&#10;        display: [&#10;            {&#10;                name: &quot;Sphereon&quot;,&#10;                description: &quot;Sphereon JFF Plugfest3 Issuer&quot;&#10;            }&#10;        ],&#10;        credentials_supported: [&#10;            {&#10;                id: &quot;OpenBadgeCredentialJwt&quot;,&#10;                format: &quot;jwt_vc_json&quot;,&#10;                types: [&quot;VerifiableCredential&quot;, &quot;OpenBadgeCredential&quot;],&#10;                display: [&#10;                    {&#10;                        name: &quot;Example University Degree&quot;,&#10;                        description: &quot;JFF Plugfest 3 OpenBadge (JWT)&quot;,&#10;                        text_color: &quot;#FFFFFF&quot;,&#10;                        background_color: &quot;#1763c1&quot;,&#10;                        logo: {&#10;                            url: &quot;https://w3c-ccg.github.io/vc-ed/plugfest-1-2022/images/JFF_LogoLockup.png&quot;,&#10;                            alt_text: &quot;Red, magenta and yellow vertical lines with 3 black dots and the text JFF, depicting the Jobs For the Future logo.&quot;&#10;                        }&#10;                    },&#10;                    {&#10;                        locale: &quot;en-US&quot;,&#10;                        name: &quot;Example University Degree&quot;,&#10;                        description: &quot;JFF Plugfest 3 OpenBadge (JWT)&quot;,&#10;                        text_color: &quot;#FFFFFF&quot;,&#10;                        background_color: &quot;#1763c1&quot;,&#10;                        logo: {&#10;                            url: &quot;https://w3c-ccg.github.io/vc-ed/plugfest-1-2022/images/JFF_LogoLockup.png&quot;,&#10;                            alt_text: &quot;Red, magenta and yellow vertical lines with 3 black dots and the text JFF, depicting the Jobs For the Future logo.&quot;&#10;                        }&#10;                    }&#10;                ],&#10;                cryptographic_binding_methods_supported: [&quot;did:key&quot;],&#10;                cryptographic_suites_supported: [&quot;EdDSA&quot;]&#10;            }&#10;        ]&#10;    };&#10;    res.json(metadata);&#10;});&#10;&#10;// Credential Offer作成API&#10;app.post('/api/create-offer', (req, res) =&gt; {&#10;    try {&#10;        const { firstName, lastName, email } = req.body;&#10;&#10;        // Pre-authorized codeの生成&#10;        const preAuthorizedCode = crypto.randomBytes(16).toString('hex');&#10;&#10;        // ユーザー情報を保存&#10;        userCredentials.set(preAuthorizedCode, {&#10;            firstName,&#10;            lastName,&#10;            email,&#10;            timestamp: Date.now()&#10;        });&#10;&#10;        // Pre-authorized codeを保存（有効期限: 10分）&#10;        preAuthorizedCodes.set(preAuthorizedCode, {&#10;            used: false,&#10;            expires: Date.now() + 10 * 60 * 1000 // 10分&#10;        });&#10;        console.log('%o', preAuthorizedCode)&#10;&#10;        // Credential Offer作成&#10;        const credentialOffer = {&#10;            grants: {&#10;                &quot;urn:ietf:params:oauth:grant-type:pre-authorized_code&quot;: {&#10;                    &quot;pre-authorized_code&quot;: preAuthorizedCode,&#10;                    &quot;user_pin_required&quot;: false&#10;                }&#10;            },&#10;            credentials: [&quot;OpenBadgeCredential&quot;],&#10;            credential_issuer: baseUrl&#10;        };&#10;&#10;        // QRコード用のURL&#10;        const qrCodeData = `openid-credential-offer://?credential_offer=${encodeURIComponent(JSON.stringify(credentialOffer))}`;&#10;&#10;        res.json({&#10;            credentialOffer,&#10;            qrCodeData,&#10;            preAuthorizedCode&#10;        });&#10;&#10;        console.log(` Credential Offer作成: ${preAuthorizedCode} for ${firstName} ${lastName}`);&#10;&#10;    } catch (error) {&#10;        console.error('Error creating credential offer:', error);&#10;        res.status(500).json({ error: 'Internal server error' });&#10;    }&#10;});&#10;&#10;// Token Endpoint&#10;app.post('/token', (req, res) =&gt; {&#10;    try {&#10;        console.log(' Request body: %o', req.body);&#10;        console.log(' Request headers: %o', req.headers);&#10;        const grant_type = req.body['grant_type'];&#10;        const pre_authorized_code = req.body['pre-authorized_code'];&#10;        const client_id = req.body['client_id'];&#10;&#10;        console.log(` Token request: grant_type=${grant_type}, code=${pre_authorized_code}`);&#10;&#10;        // Grant typeの検証&#10;        if (grant_type !== 'urn:ietf:params:oauth:grant-type:pre-authorized_code') {&#10;            return res.status(400).json({ error: 'unsupported_grant_type' });&#10;        }&#10;&#10;        // Pre-authorized codeの検証&#10;        const codeData = preAuthorizedCodes.get(pre_authorized_code);&#10;//        console.log(' Debug info:');&#10;//        console.log('pre-authorized_code:', JSON.stringify(pre_authorized_code));&#10;//        console.log('Type:', typeof pre_authorized_code);&#10;//        console.log('Length:', pre_authorized_code?.length);&#10;//        console.log('Map keys:', Array.from(preAuthorizedCodes.keys()));&#10;//        console.log('Exact match test:', preAuthorizedCodes.has(pre_authorized_code));&#10;//        console.log('%o', preAuthorizedCodes);&#10;        if (!codeData) {&#10;            return res.status(400).json({ error: 'invalid_grant' });&#10;        }&#10;&#10;        if (codeData.used) {&#10;            return res.status(400).json({ error: 'invalid_grant', description: 'Code already used' });&#10;        }&#10;&#10;        if (Date.now() &gt; codeData.expires) {&#10;            preAuthorizedCodes.delete(pre_authorized_code);&#10;            return res.status(400).json({ error: 'invalid_grant', description: 'Code expired' });&#10;        }&#10;&#10;        // コードを使用済みにマーク&#10;        codeData.used = true;&#10;&#10;        // Access tokenの生成&#10;        const accessToken = crypto.randomBytes(32).toString('hex');&#10;        const cNonce = uuidv4();&#10;&#10;        // Access tokenを保存（有効期限: 5分）&#10;        accessTokens.set(accessToken, {&#10;            preAuthorizedCode: pre_authorized_code,&#10;            cNonce,&#10;            expires: Date.now() + 5 * 60 * 1000, // 5分&#10;            issued: Date.now()&#10;        });&#10;&#10;        const tokenResponse = {&#10;            access_token: accessToken,&#10;            token_type: 'bearer',&#10;            expires_in: 300,&#10;            c_nonce: cNonce,&#10;            c_nonce_expires_in: 300000&#10;        };&#10;&#10;        res.json(tokenResponse);&#10;        console.log(`✅ Access token発行: ${accessToken.substring(0, 8)}...`);&#10;&#10;    } catch (error) {&#10;        console.error('Error issuing token:', error);&#10;        res.status(500).json({ error: 'server_error' });&#10;    }&#10;});&#10;&#10;// Credentials Endpoint&#10;app.post('/credentials', async (req, res) =&gt; {&#10;    try {&#10;        const authHeader = req.headers.authorization;&#10;        const { types, format, proof } = req.body;&#10;&#10;        console.log(` Credential request: types=${JSON.stringify(types)}, format=${format}`);&#10;&#10;        // Access tokenの検証&#10;        if (!authHeader || !authHeader.startsWith('Bearer ')) {&#10;            return res.status(401).json({ error: 'invalid_token' });&#10;        }&#10;&#10;        const accessToken = authHeader.substring(7);&#10;        const tokenData = accessTokens.get(accessToken);&#10;&#10;        if (!tokenData) {&#10;            return res.status(401).json({ error: 'invalid_token' });&#10;        }&#10;&#10;        if (Date.now() &gt; tokenData.expires) {&#10;            accessTokens.delete(accessToken);&#10;            return res.status(401).json({ error: 'invalid_token', description: 'Token expired' });&#10;        }&#10;&#10;        // ユーザー情報の取得&#10;        const userData = userCredentials.get(tokenData.preAuthorizedCode);&#10;        if (!userData) {&#10;            return res.status(400).json({ error: 'invalid_request', description: 'User data not found' });&#10;        }&#10;&#10;        // Verifiable Credentialの作成&#10;        const credentialId = uuidv4();&#10;        const achievementId = `urn:uuid:${uuidv4()}`;&#10;        const now = new Date();&#10;        const issuanceDate = now.toISOString();&#10;        const afterOneYear = Date.now() + 365 * 24 * 60 * 60 * 1000&#10;        const expirationDate = new Date(afterOneYear).toISOString(); // 1年後&#10;&#10;        // JWT用のタイムスタンプ（Unix timestamp seconds）&#10;        const exp = Math.floor(afterOneYear / 1000); // 1年後（秒）&#10;        const nbf = Math.floor(Date.now() / 1000); // 現在時刻（秒）&#10;&#10;        const credential = {&#10;            &quot;@context&quot;: [&#10;                &quot;https://www.w3.org/2018/credentials/v1&quot;,&#10;                &quot;https://purl.imsglobal.org/spec/ob/v3p0/context.json&quot;&#10;            ],&#10;            &quot;type&quot;: [&quot;VerifiableCredential&quot;, &quot;OpenBadgeCredential&quot;],&#10;            &quot;issuer&quot;: {&#10;                &quot;type&quot;: [&quot;Profile&quot;],&#10;                &quot;id&quot;: didJwk,&#10;                &quot;name&quot;: &quot;Jobs for the Future (JFF)&quot;,&#10;                &quot;url&quot;: &quot;https://www.jff.org/&quot;,&#10;                &quot;image&quot;: &quot;https://w3c-ccg.github.io/vc-ed/plugfest-1-2022/images/JFF_LogoLockup.png&quot;&#10;            },&#10;            &quot;issuanceDate&quot;: issuanceDate,&#10;            &quot;expirationDate&quot;: expirationDate,&#10;            &quot;name&quot;: &quot;JFF x vc-edu PlugFest 3 Interoperability&quot;,&#10;            &quot;credentialSubject&quot;: {&#10;                &quot;type&quot;: [&quot;AchievementSubject&quot;],&#10;                &quot;id&quot;: `did:example:${crypto.randomBytes(16).toString('hex')}`,&#10;                &quot;achievement&quot;: {&#10;                    &quot;id&quot;: achievementId,&#10;                    &quot;type&quot;: [&quot;Achievement&quot;],&#10;                    &quot;name&quot;: &quot;JFF x vc-edu PlugFest 3 Interoperability&quot;,&#10;                    &quot;description&quot;: &quot;This wallet supports the use of W3C Verifiable Credentials and has demonstrated interoperability during the presentation request workflow during JFF x VC-EDU PlugFest 3.&quot;,&#10;                    &quot;criteria&quot;: {&#10;                        &quot;type&quot;: &quot;Criteria&quot;,&#10;                        &quot;narrative&quot;: &quot;Wallet solutions providers earned this badge by demonstrating interoperability during the presentation request workflow. This includes successfully receiving a presentation request, allowing the holder to select at least two types of verifiable credentials to create a verifiable presentation, returning the presentation to the requestor, and passing verification of the presentation and the included credentials.&quot;&#10;                    },&#10;                    &quot;image&quot;: {&#10;                        &quot;id&quot;: &quot;https://w3c-ccg.github.io/vc-ed/plugfest-3-2023/images/JFF-VC-EDU-PLUGFEST3-badge-image.png&quot;,&#10;                        &quot;type&quot;: &quot;Image&quot;&#10;                    }&#10;                }&#10;            }&#10;        };&#10;&#10;        // JWTペイロードの作成（記事の例に合わせて統一された形式で）&#10;        const jwtPayload = {&#10;            &quot;vc&quot;: credential,&#10;            &quot;@context&quot;: credential[&quot;@context&quot;],&#10;            &quot;type&quot;: credential.type,&#10;            &quot;expirationDate&quot;: expirationDate,&#10;            &quot;name&quot;: credential.name,&#10;            &quot;issuer&quot;: credential.issuer,&#10;            &quot;credentialSubject&quot;: credential.credentialSubject,&#10;            &quot;issuanceDate&quot;: issuanceDate,&#10;            &quot;sub&quot;: credential.credentialSubject.id,&#10;            &quot;nbf&quot;: nbf,&#10;            &quot;exp&quot;: exp,&#10;            &quot;iss&quot;: didJwk&#10;        };&#10;&#10;        console.log(' JWT Payload:', JSON.stringify(jwtPayload, null, 2));&#10;&#10;        // JWTとしてCredentialに署名&#10;        const jwt = await new SignJWT(jwtPayload)&#10;            .setProtectedHeader({&#10;                alg: 'ES256K',&#10;                typ: 'JWT',&#10;                kid: didJwk + '#0'&#10;            })&#10;            .setIssuedAt()&#10;            .setIssuer(didJwk)&#10;            .setAudience('openid4vci-wallet')&#10;            .sign(keyPair.privateKey);&#10;&#10;        // Access tokenを削除（使用済み）&#10;        accessTokens.delete(accessToken);&#10;&#10;        const response = {&#10;            credential: jwt,&#10;            format: 'jwt_vc_json',&#10;            c_nonce: uuidv4(),&#10;            c_nonce_expires_in: 300000&#10;        };&#10;&#10;        res.json(response);&#10;        console.log(` VC発行完了: ${userData.firstName} ${userData.lastName} (${userData.email})`);&#10;&#10;    } catch (error) {&#10;        console.error('Error issuing credential:', error);&#10;        res.status(500).json({ error: 'server_error' });&#10;    }&#10;});&#10;&#10;// DID Document endpoint (オプショナル)&#10;app.get('/did.json', (req, res) =&gt; {&#10;    if (!didJwk) {&#10;        return res.status(500).json({ error: 'Keys not initialized' });&#10;    }&#10;&#10;    const didDocument = {&#10;        &quot;@context&quot;: [&#10;            &quot;https://www.w3.org/ns/did/v1&quot;,&#10;            &quot;https://w3id.org/security/suites/jws-2020/v1&quot;&#10;        ],&#10;        &quot;id&quot;: didJwk,&#10;        &quot;verificationMethod&quot;: [&#10;            {&#10;                &quot;id&quot;: didJwk + &quot;#0&quot;,&#10;                &quot;type&quot;: &quot;JsonWebKey2020&quot;,&#10;                &quot;controller&quot;: didJwk,&#10;                &quot;publicKeyJwk&quot;: publicKeyJWK&#10;            }&#10;        ],&#10;        &quot;assertionMethod&quot;: [didJwk + &quot;#0&quot;],&#10;        &quot;authentication&quot;: [didJwk + &quot;#0&quot;],&#10;        &quot;capabilityInvocation&quot;: [didJwk + &quot;#0&quot;],&#10;        &quot;capabilityDelegation&quot;: [didJwk + &quot;#0&quot;]&#10;    };&#10;&#10;    res.json(didDocument);&#10;});&#10;&#10;// エラーハンドリング&#10;app.use((err, req, res, next) =&gt; {&#10;    console.error('Unhandled error:', err);&#10;    res.status(500).json({ error: 'Internal server error' });&#10;});&#10;&#10;// サーバー起動&#10;async function startServer() {&#10;    try {&#10;        await initializeKeys();&#10;&#10;        app.listen(PORT, () =&gt; {&#10;            console.log(`\n OpenID4VCI Demo Server started!`);&#10;            console.log(` Web UI: ${baseUrl}`);&#10;            console.log(` Issuer Metadata: ${baseUrl}/.well-known/openid-credential-issuer`);&#10;            console.log(` Token Endpoint: ${baseUrl}/token`);&#10;            console.log(` Credentials Endpoint: ${baseUrl}/credentials`);&#10;            console.log(`\n 使用方法:`);&#10;            console.log(`1. ブラウザで ${baseUrl} にアクセス`);&#10;            console.log(`2. フォームに情報を入力してQRコードを生成`);&#10;            console.log(`3. Sphereon WalletまたはOpenID4VCI対応ウォレットでQRコードをスキャン`);&#10;            console.log(`4. Verifiable Credentialがウォレットに発行されます\n`);&#10;        });&#10;    } catch (error) {&#10;        console.error('Failed to start server:', error);&#10;        process.exit(1);&#10;    }&#10;}&#10;&#10;startServer();&#10;" />
              <option name="updatedContent" value="const express = require('express');&#10;const crypto = require('crypto');&#10;const QRCode = require('qrcode');&#10;const { SignJWT, generateKeyPair, importJWK, exportJWK } = require('jose');&#10;const { v4: uuidv4 } = require('uuid');&#10;const cors = require('cors');&#10;const path = require('path');&#10;&#10;const app = express();&#10;const PORT = process.env.PORT || 8888;&#10;&#10;// ドメイン名をコマンドライン引数から取得&#10;const domain = process.argv[2] || 'localhost:8888';&#10;const baseUrl = domain.includes('localhost') ? `http://${domain}` : `https://${domain}`;&#10;&#10;// ミドルウェア&#10;app.use(express.json());&#10;app.use(express.urlencoded({ extended: true })); // application/x-www-form-urlencoded対応&#10;app.use(cors());&#10;app.use(express.static('views'));&#10;&#10;// メモリストレージ（本番環境では永続化ストレージを使用）&#10;const preAuthorizedCodes = new Map();&#10;const accessTokens = new Map();&#10;const userCredentials = new Map();&#10;&#10;// 暗号化キーペアの生成&#10;let keyPair;&#10;let publicKeyJWK;&#10;let privateKeyJWK;&#10;let didJwk;&#10;&#10;async function initializeKeys() {&#10;    // ES256K キーペアを生成&#10;    keyPair = await generateKeyPair('ES256K');&#10;    publicKeyJWK = await exportJWK(keyPair.publicKey);&#10;    privateKeyJWK = await exportJWK(keyPair.privateKey);&#10;&#10;    // DID:JWKの生成&#10;    const publicKeyJwkString = JSON.stringify(publicKeyJWK);&#10;    const encodedJwk = Buffer.from(publicKeyJwkString).toString('base64url');&#10;    didJwk = `did:jwk:${encodedJwk}`;&#10;&#10;    console.log(`\n キーペア生成完了`);&#10;    console.log(` DID:JWK: ${didJwk}`);&#10;    console.log(` ベースURL: ${baseUrl}`);&#10;}&#10;&#10;// ルートページ&#10;app.get('/', (req, res) =&gt; {&#10;    res.sendFile(path.join(__dirname, 'views', 'index.html'));&#10;});&#10;&#10;// OpenID Credential Issuer Metadata&#10;app.get('/.well-known/openid-credential-issuer', (req, res) =&gt; {&#10;    const metadata = {&#10;        credential_issuer: baseUrl,&#10;        credential_endpoint: `${baseUrl}/credentials`,&#10;        token_endpoint: `${baseUrl}/token`,&#10;        display: [&#10;            {&#10;                name: &quot;Sphereon&quot;,&#10;                description: &quot;Sphereon JFF Plugfest3 Issuer&quot;&#10;            }&#10;        ],&#10;        credentials_supported: [&#10;            {&#10;                id: &quot;OpenBadgeCredentialJwt&quot;,&#10;                format: &quot;jwt_vc_json&quot;,&#10;                types: [&quot;VerifiableCredential&quot;, &quot;OpenBadgeCredential&quot;],&#10;                display: [&#10;                    {&#10;                        name: &quot;Example University Degree&quot;,&#10;                        description: &quot;JFF Plugfest 3 OpenBadge (JWT)&quot;,&#10;                        text_color: &quot;#FFFFFF&quot;,&#10;                        background_color: &quot;#1763c1&quot;,&#10;                        logo: {&#10;                            url: &quot;https://w3c-ccg.github.io/vc-ed/plugfest-1-2022/images/JFF_LogoLockup.png&quot;,&#10;                            alt_text: &quot;Red, magenta and yellow vertical lines with 3 black dots and the text JFF, depicting the Jobs For the Future logo.&quot;&#10;                        }&#10;                    },&#10;                    {&#10;                        locale: &quot;en-US&quot;,&#10;                        name: &quot;Example University Degree&quot;,&#10;                        description: &quot;JFF Plugfest 3 OpenBadge (JWT)&quot;,&#10;                        text_color: &quot;#FFFFFF&quot;,&#10;                        background_color: &quot;#1763c1&quot;,&#10;                        logo: {&#10;                            url: &quot;https://w3c-ccg.github.io/vc-ed/plugfest-1-2022/images/JFF_LogoLockup.png&quot;,&#10;                            alt_text: &quot;Red, magenta and yellow vertical lines with 3 black dots and the text JFF, depicting the Jobs For the Future logo.&quot;&#10;                        }&#10;                    }&#10;                ],&#10;                cryptographic_binding_methods_supported: [&quot;did:key&quot;],&#10;                cryptographic_suites_supported: [&quot;EdDSA&quot;]&#10;            }&#10;        ]&#10;    };&#10;    res.json(metadata);&#10;});&#10;&#10;// Credential Offer作成API&#10;app.post('/api/create-offer', (req, res) =&gt; {&#10;    try {&#10;        const { firstName, lastName, email } = req.body;&#10;&#10;        // Pre-authorized codeの生成&#10;        const preAuthorizedCode = crypto.randomBytes(16).toString('hex');&#10;&#10;        // ユーザー情報を保存&#10;        userCredentials.set(preAuthorizedCode, {&#10;            firstName,&#10;            lastName,&#10;            email,&#10;            timestamp: Date.now()&#10;        });&#10;&#10;        // Pre-authorized codeを保存（有効期限: 10分）&#10;        preAuthorizedCodes.set(preAuthorizedCode, {&#10;            used: false,&#10;            expires: Date.now() + 10 * 60 * 1000 // 10分&#10;        });&#10;        console.log('%o', preAuthorizedCode)&#10;&#10;        // Credential Offer作成&#10;        const credentialOffer = {&#10;            grants: {&#10;                &quot;urn:ietf:params:oauth:grant-type:pre-authorized_code&quot;: {&#10;                    &quot;pre-authorized_code&quot;: preAuthorizedCode,&#10;                    &quot;user_pin_required&quot;: false&#10;                }&#10;            },&#10;            credentials: [&quot;OpenBadgeCredential&quot;],&#10;            credential_issuer: baseUrl&#10;        };&#10;&#10;        // QRコード用のURL&#10;        const qrCodeData = `openid-credential-offer://?credential_offer=${encodeURIComponent(JSON.stringify(credentialOffer))}`;&#10;&#10;        res.json({&#10;            credentialOffer,&#10;            qrCodeData,&#10;            preAuthorizedCode&#10;        });&#10;&#10;        console.log(` Credential Offer作成: ${preAuthorizedCode} for ${firstName} ${lastName}`);&#10;&#10;    } catch (error) {&#10;        console.error('Error creating credential offer:', error);&#10;        res.status(500).json({ error: 'Internal server error' });&#10;    }&#10;});&#10;&#10;// Token Endpoint&#10;app.post('/token', (req, res) =&gt; {&#10;    try {&#10;        console.log(' Request body: %o', req.body);&#10;        console.log(' Request headers: %o', req.headers);&#10;        const grant_type = req.body['grant_type'];&#10;        const pre_authorized_code = req.body['pre-authorized_code'];&#10;        const client_id = req.body['client_id'];&#10;&#10;        console.log(` Token request: grant_type=${grant_type}, code=${pre_authorized_code}`);&#10;&#10;        // Grant typeの検証&#10;        if (grant_type !== 'urn:ietf:params:oauth:grant-type:pre-authorized_code') {&#10;            return res.status(400).json({ error: 'unsupported_grant_type' });&#10;        }&#10;&#10;        // Pre-authorized codeの検証&#10;        const codeData = preAuthorizedCodes.get(pre_authorized_code);&#10;//        console.log(' Debug info:');&#10;//        console.log('pre-authorized_code:', JSON.stringify(pre_authorized_code));&#10;//        console.log('Type:', typeof pre_authorized_code);&#10;//        console.log('Length:', pre_authorized_code?.length);&#10;//        console.log('Map keys:', Array.from(preAuthorizedCodes.keys()));&#10;//        console.log('Exact match test:', preAuthorizedCodes.has(pre_authorized_code));&#10;//        console.log('%o', preAuthorizedCodes);&#10;        if (!codeData) {&#10;            return res.status(400).json({ error: 'invalid_grant' });&#10;        }&#10;&#10;        if (codeData.used) {&#10;            return res.status(400).json({ error: 'invalid_grant', description: 'Code already used' });&#10;        }&#10;&#10;        if (Date.now() &gt; codeData.expires) {&#10;            preAuthorizedCodes.delete(pre_authorized_code);&#10;            return res.status(400).json({ error: 'invalid_grant', description: 'Code expired' });&#10;        }&#10;&#10;        // コードを使用済みにマーク&#10;        codeData.used = true;&#10;&#10;        // Access tokenの生成&#10;        const accessToken = crypto.randomBytes(32).toString('hex');&#10;        const cNonce = uuidv4();&#10;&#10;        // Access tokenを保存（有効期限: 5分）&#10;        accessTokens.set(accessToken, {&#10;            preAuthorizedCode: pre_authorized_code,&#10;            cNonce,&#10;            expires: Date.now() + 5 * 60 * 1000, // 5分&#10;            issued: Date.now()&#10;        });&#10;&#10;        const tokenResponse = {&#10;            access_token: accessToken,&#10;            token_type: 'bearer',&#10;            expires_in: 300,&#10;            c_nonce: cNonce,&#10;            c_nonce_expires_in: 300000&#10;        };&#10;&#10;        res.json(tokenResponse);&#10;        console.log(`✅ Access token発行: ${accessToken.substring(0, 8)}...`);&#10;&#10;    } catch (error) {&#10;        console.error('Error issuing token:', error);&#10;        res.status(500).json({ error: 'server_error' });&#10;    }&#10;});&#10;&#10;// Credentials Endpoint&#10;app.post('/credentials', async (req, res) =&gt; {&#10;    try {&#10;        const authHeader = req.headers.authorization;&#10;        const { types, format, proof } = req.body;&#10;&#10;        console.log(` Credential request: types=${JSON.stringify(types)}, format=${format}`);&#10;&#10;        // Access tokenの検証&#10;        if (!authHeader || !authHeader.startsWith('Bearer ')) {&#10;            return res.status(401).json({ error: 'invalid_token' });&#10;        }&#10;&#10;        const accessToken = authHeader.substring(7);&#10;        const tokenData = accessTokens.get(accessToken);&#10;&#10;        if (!tokenData) {&#10;            return res.status(401).json({ error: 'invalid_token' });&#10;        }&#10;&#10;        if (Date.now() &gt; tokenData.expires) {&#10;            accessTokens.delete(accessToken);&#10;            return res.status(401).json({ error: 'invalid_token', description: 'Token expired' });&#10;        }&#10;&#10;        // ユーザー情報の取得&#10;        const userData = userCredentials.get(tokenData.preAuthorizedCode);&#10;        if (!userData) {&#10;            return res.status(400).json({ error: 'invalid_request', description: 'User data not found' });&#10;        }&#10;&#10;        // Verifiable Credentialの作成&#10;        const credentialId = uuidv4();&#10;        const achievementId = `urn:uuid:${uuidv4()}`;&#10;        const now = new Date();&#10;        const issuanceDate = now.toISOString();&#10;        const afterOneYear = Date.now() + 365 * 24 * 60 * 60 * 1000&#10;        const expirationDate = new Date(afterOneYear).toISOString(); // 1年後&#10;&#10;        // JWT用のタイムスタンプ（Unix timestamp seconds）&#10;        const exp = Math.floor(afterOneYear / 1000); // 1年後（秒）&#10;        const nbf = Math.floor(Date.now() / 1000); // 現在時刻（秒）&#10;&#10;        const credential = {&#10;            &quot;@context&quot;: [&#10;                &quot;https://www.w3.org/2018/credentials/v1&quot;,&#10;                &quot;https://purl.imsglobal.org/spec/ob/v3p0/context.json&quot;&#10;            ],&#10;            &quot;type&quot;: [&quot;VerifiableCredential&quot;, &quot;OpenBadgeCredential&quot;],&#10;            &quot;issuer&quot;: {&#10;                &quot;type&quot;: [&quot;Profile&quot;],&#10;                &quot;id&quot;: didJwk,&#10;                &quot;name&quot;: &quot;Jobs for the Future (JFF)&quot;,&#10;                &quot;url&quot;: &quot;https://www.jff.org/&quot;,&#10;                &quot;image&quot;: &quot;https://w3c-ccg.github.io/vc-ed/plugfest-1-2022/images/JFF_LogoLockup.png&quot;&#10;            },&#10;            &quot;issuanceDate&quot;: issuanceDate,&#10;            &quot;expirationDate&quot;: expirationDate,&#10;            &quot;name&quot;: &quot;JFF x vc-edu PlugFest 3 Interoperability&quot;,&#10;            &quot;credentialSubject&quot;: {&#10;                &quot;type&quot;: [&quot;AchievementSubject&quot;],&#10;                &quot;id&quot;: `did:example:${crypto.randomBytes(16).toString('hex')}`,&#10;                &quot;achievement&quot;: {&#10;                    &quot;id&quot;: achievementId,&#10;                    &quot;type&quot;: [&quot;Achievement&quot;],&#10;                    &quot;name&quot;: &quot;JFF x vc-edu PlugFest 3 Interoperability&quot;,&#10;                    &quot;description&quot;: &quot;This wallet supports the use of W3C Verifiable Credentials and has demonstrated interoperability during the presentation request workflow during JFF x VC-EDU PlugFest 3.&quot;,&#10;                    &quot;criteria&quot;: {&#10;                        &quot;type&quot;: &quot;Criteria&quot;,&#10;                        &quot;narrative&quot;: &quot;Wallet solutions providers earned this badge by demonstrating interoperability during the presentation request workflow. This includes successfully receiving a presentation request, allowing the holder to select at least two types of verifiable credentials to create a verifiable presentation, returning the presentation to the requestor, and passing verification of the presentation and the included credentials.&quot;&#10;                    },&#10;                    &quot;image&quot;: {&#10;                        &quot;id&quot;: &quot;https://w3c-ccg.github.io/vc-ed/plugfest-3-2023/images/JFF-VC-EDU-PLUGFEST3-badge-image.png&quot;,&#10;                        &quot;type&quot;: &quot;Image&quot;&#10;                    }&#10;                }&#10;            }&#10;        };&#10;&#10;        // JWTペイロードの作成（記事の例に合わせて統一された形式で）&#10;        const jwtPayload = {&#10;            &quot;vc&quot;: credential,&#10;            &quot;@context&quot;: credential[&quot;@context&quot;],&#10;            &quot;type&quot;: credential.type,&#10;            &quot;expirationDate&quot;: expirationDate,&#10;            &quot;name&quot;: credential.name,&#10;            &quot;issuer&quot;: credential.issuer,&#10;            &quot;credentialSubject&quot;: credential.credentialSubject,&#10;            &quot;issuanceDate&quot;: issuanceDate,&#10;            &quot;sub&quot;: credential.credentialSubject.id,&#10;            &quot;nbf&quot;: nbf,&#10;            &quot;exp&quot;: exp,&#10;            &quot;iss&quot;: didJwk&#10;        };&#10;&#10;        console.log(' JWT Payload:', JSON.stringify(jwtPayload, null, 2));&#10;&#10;        // JWTとしてCredentialに署名&#10;        const jwt = await new SignJWT(jwtPayload)&#10;            .setProtectedHeader({&#10;                alg: 'ES256K',&#10;                typ: 'JWT',&#10;                kid: didJwk + '#0'&#10;            })&#10;            .setIssuedAt()&#10;            .setIssuer(didJwk)&#10;            .setAudience('openid4vci-wallet')&#10;            .sign(keyPair.privateKey);&#10;&#10;        // Access tokenを削除（使用済み）&#10;        accessTokens.delete(accessToken);&#10;&#10;        const response = {&#10;            credential: jwt,&#10;            format: 'jwt_vc_json',&#10;            c_nonce: uuidv4(),&#10;            c_nonce_expires_in: 300000&#10;        };&#10;&#10;        res.json(response);&#10;        console.log(` VC発行完了: ${userData.firstName} ${userData.lastName} (${userData.email})`);&#10;&#10;    } catch (error) {&#10;        console.error('Error issuing credential:', error);&#10;        res.status(500).json({ error: 'server_error' });&#10;    }&#10;});&#10;&#10;// DID Document endpoint (オプショナル)&#10;app.get('/did.json', (req, res) =&gt; {&#10;    if (!didJwk) {&#10;        return res.status(500).json({ error: 'Keys not initialized' });&#10;    }&#10;&#10;    const didDocument = {&#10;        &quot;@context&quot;: [&#10;            &quot;https://www.w3.org/ns/did/v1&quot;,&#10;            &quot;https://w3id.org/security/suites/jws-2020/v1&quot;&#10;        ],&#10;        &quot;id&quot;: didJwk,&#10;        &quot;verificationMethod&quot;: [&#10;            {&#10;                &quot;id&quot;: didJwk + &quot;#0&quot;,&#10;                &quot;type&quot;: &quot;JsonWebKey2020&quot;,&#10;                &quot;controller&quot;: didJwk,&#10;                &quot;publicKeyJwk&quot;: publicKeyJWK&#10;            }&#10;        ],&#10;        &quot;assertionMethod&quot;: [didJwk + &quot;#0&quot;],&#10;        &quot;authentication&quot;: [didJwk + &quot;#0&quot;],&#10;        &quot;capabilityInvocation&quot;: [didJwk + &quot;#0&quot;],&#10;        &quot;capabilityDelegation&quot;: [didJwk + &quot;#0&quot;]&#10;    };&#10;&#10;    res.json(didDocument);&#10;});&#10;&#10;// エラーハンドリング&#10;app.use((err, req, res, next) =&gt; {&#10;    console.error('Unhandled error:', err);&#10;    res.status(500).json({ error: 'Internal server error' });&#10;});&#10;&#10;// サーバー起動&#10;async function startServer() {&#10;    try {&#10;        await initializeKeys();&#10;&#10;        app.listen(PORT, () =&gt; {&#10;            console.log(`\n OpenID4VCI Demo Server started!`);&#10;            console.log(` Web UI: ${baseUrl}`);&#10;            console.log(` Issuer Metadata: ${baseUrl}/.well-known/openid-credential-issuer`);&#10;            console.log(` Token Endpoint: ${baseUrl}/token`);&#10;            console.log(` Credentials Endpoint: ${baseUrl}/credentials`);&#10;            console.log(`\n 使用方法:`);&#10;            console.log(`1. ブラウザで ${baseUrl} にアクセス`);&#10;            console.log(`2. フォームに情報を入力してQRコードを生成`);&#10;            console.log(`3. Sphereon WalletまたはOpenID4VCI対応ウォレットでQRコードをスキャン`);&#10;            console.log(`4. Verifiable Credentialがウォレットに発行されます\n`);&#10;        });&#10;    } catch (error) {&#10;        console.error('Failed to start server:', error);&#10;        process.exit(1);&#10;    }&#10;}&#10;&#10;startServer();" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>